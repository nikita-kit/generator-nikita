# nikita.kickstarter

This is our toolbelt how to start a new project from scratch. It is generated by [generator-nikita](https://github.com/nikita-kit/generator-nikita) powered by [yeoman](http://yeoman.io/).

Latest Release: [![GitHub version](https://badge.fury.io/gh/nikita-kit%2Fnikita-kickstarter.png)](https://github.com/nikita-kit/nikita-kickstarter/releases)

If you're interested in HTML patterns, code snippets and best practices, try [nikita.html](https://github.com/nikita-kit/nikita-html).  
If you want to write efficient and scalable (S)CSS-code for big websites, try [nikita.css](https://github.com/nikita-kit/nikita-css).


## Project-Setup

- [__Grunt__](http://gruntjs.com/) – js task runner
- [__Webpack__](https://webpack.js.org/) – module bundler
- [__Babel__](https://babeljs.io/) – compiler for ES6 javascript<% if (config.get('staticPageGenerator').indexOf('assemble') != -1) { %>
- [__Assemble__](http://assemble.io/) – static site generator<% } %><% if (config.get('staticPageGenerator').indexOf('twigRender') != -1) { %>
- [__twigRender__](https://github.com/stefanullinger/grunt-twig-render) – static site generator<% } %>
- [__SASS__](http://sass-lang.com/) with [__LibSass__](http://libsass.org/) – css preprocessing
- [__nikita.html__](https://github.com/nikita-kit/nikita-html) – HTML conventions and coding guidelines
- [__nikita.css__](https://github.com/nikita-kit/nikita-css) – (S)CSS conventions and coding guidelines
- [__nikita.js__](https://github.com/nikita-kit/nikita-js) – JS conventions and coding guidelines
- [__Jest__](https://facebook.github.io/jest/) – JS testing framework
- [__ESLint__](http://eslint.org/) – linter for JS files
- [__stylelint__](https://stylelint.io/) – linter for SCSS files
- [__Browsersync__](https://browsersync.io/) – synchronised browser testing<% if (config.get('features').indexOf('cssStyleGuide') != -1) { %>
- [__KSS__](http://warpspire.com/kss/) – living styleguide<% } %>

Grunt depends on [node.js](http://nodejs.org). Some of the [Grunt plugins](#grunt-plugins-used) depend on command line tools to be installed on your (build) system.

## Requirements

These are the minimum requirements for the project setup:  
 
- [__Node.js & Node Package Manager__](http://nodejs.org)
- [__Grunt Command Line Interface__](http://gruntjs.com/getting-started) – `sudo npm install -g grunt-cli`


## Getting started

Open your preferred command line tool and choose your project directory.  

Either use `./setup-dev-env.sh`. This will start a shell script to check requirements, then runs `npm install` automatically to install Grunt and [Grunt plugins](#grunt-plugins-used) required for the build script.

Or use `npm install` if your are on Windows (you have to check the requirements manually). This will install Grunt and [Grunt plugins](#grunt-plugins-used) required for the build script.

1. `grunt` or `grunt build` – start build script
2. [http://localhost:3000/](http://localhost:3000/) or [http://0.0.0.0:3000/](http://0.0.0.0:3000/) – watch your build-directory in the browser
3. `grunt dist` – start distribution build script

If you want to specify a different port, you can start the script with the `--port` option:
`grunt --port=9000` will launch the BrowserSync webserver on [http://0.0.0.0:9000/](http://0.0.0.0:9000/) and will start the Browsersync UI on port 9001 (= 9000 + 1).
If a port is already in use, BrowserSync will auto detect that case and increases the port number until a free port is found.

If you want to generate the dist to a different folder, you may use the `--target` option:
`grunt dist --target=www` will generate to `www` folder instead of `dist`.

## Grunt-Devtools

If you dont't like the command line you can use an alternative called [grunt-devtools](https://github.com/vladikoff/grunt-devtools) for the Chrome browser to start the grunt tasks.

1. Download the [Grunt Devtools extension for Chrome Developer Tools](https://chrome.google.com/webstore/detail/grunt-devtools/fbiodiodggnlakggeeckkjccjhhjndnb?hl=en) from the Chrome Web Store.
2. Global install via `npm install -g grunt-devtools`.
3. Run `grunt-devtools` in a directory with a Gruntfile.
4. Open Chrome Devtools and find the __Grunt tab__. Your grunt tasks should now be accessible from within Chrome.


## Grunt-Notifications

You don't like to stare permanently on your console? So wouldn’t it be great if your system could notify you when your fresh build is ready to consume or when anything bad happened? Meet [grunt-notify](https://github.com/dylang/grunt-notify), an automatic desktop notification service for Grunt using Growl for OS X or Windows, Mountain Lion and Mavericks Notification Center and Notify-Send. Just install this plugin via npm and load it in your Gruntfile.


## Dev-Packages used
<% if (config.get('staticPageGenerator').indexOf('assemble') != -1) { %>
- [assemble](https://github.com/assemble/assemble)<% } %>
- [autoprefixer-core](https://github.com/postcss/autoprefixer-core)
- [babel-core](https://github.com/babel/babel/tree/master/packages/babel-core)
- [babel-loader](https://github.com/babel/babel-loader)
- [babel-plugin-transform-runtime](https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-runtime)
- [babel-preset-env](https://github.com/babel/babel-preset-env)
- [ejs-compiled-loader](https://github.com/bazilio91/ejs-compiled-loader)
- [eslint-config-nikita](https://github.com/nikita-kit/nikita-js)
- [eslint-plugin-import](https://github.com/benmosher/eslint-plugin-import)
- [eslint-plugin-promise](https://github.com/xjamundx/eslint-plugin-promise)
- [grunt](https://github.com/gruntjs/grunt)
- [grunt-accessibility](https://github.com/yargalot/grunt-accessibility)
- [grunt-browser-sync](https://github.com/BrowserSync/grunt-browser-sync)
- [grunt-concurrent](https://github.com/sindresorhus/grunt-concurrent)
- [grunt-contrib-clean](https://github.com/gruntjs/grunt-contrib-clean)
- [grunt-contrib-copy](https://github.com/gruntjs/grunt-contrib-copy)
- [grunt-contrib-cssmin](https://github.com/gruntjs/grunt-contrib-cssmin)
- [grunt-contrib-imagemin](https://github.com/gruntjs/grunt-contrib-imagemin)
- [grunt-contrib-uglify](https://github.com/gruntjs/grunt-contrib-uglify)
- [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)
- [grunt-eslint](https://github.com/sindresorhus/grunt-eslint)
- [grunt-gitinfo](https://github.com/damkraw/grunt-gitinfo)
- [grunt-htmlhint](https://github.com/yaniswang/grunt-htmlhint)
- [grunt-newer](https://github.com/tschaub/grunt-newer)
- [grunt-postcss](https://github.com/nDmitry/grunt-postcss)
- [grunt-prettify](https://github.com/jonschlinkert/grunt-prettify)
- [grunt-sass](https://github.com/sindresorhus/grunt-sass)
- [grunt-string-replace](https://github.com/erickrdch/grunt-string-replace)<% if (config.get('features').indexOf('cssStyleGuide') != -1) { %>
- [grunt-styleguide](https://github.com/indieisaconcept/grunt-styleguide)<% } %>
- [grunt-stylelint](https://github.com/wikimedia/grunt-stylelint)
- [grunt-svg-css](https://github.com/psyrendust/grunt-svg-css)
- [grunt-svgmin](https://github.com/sindresorhus/grunt-svgmin)
- [grunt-sync](https://github.com/tomusdrw/grunt-sync)<% if (config.get('staticPageGenerator').indexOf('twigRender') != -1) { %>
- [grunt-twig-render](https://github.com/stefanullinger/grunt-twig-render)<% } %>
- [grunt-webpack](https://github.com/webpack/grunt-webpack)<% if (config.get('staticPageGenerator').indexOf('assemble') != -1) { %>
- [handlebars-helper-autolink](https://github.com/helpers/handlebars-helper-autolink)
- [handlebars-helper-partial](https://github.com/helpers/handlebars-helper-partial)
- [handlebars-helpers](https://github.com/assemble/handlebars-helpers)<% } %>
- [import-glob](https://github.com/terpiljenya/import-glob)
- [jest-cli](https://github.com/facebook/jest)
- [jit-grunt](https://github.com/shootaroo/jit-grunt)
- [load-grunt-config](https://github.com/firstandthird/load-grunt-config)
- [pre-commit](https://github.com/observing/pre-commit)
- [stylelint](https://github.com/stylelint/stylelint)
- [stylelint-order](https://github.com/hudochenkov/stylelint-order)
- [time-grunt](https://github.com/sindresorhus/time-grunt)
- [webpack](https://github.com/webpack/webpack)
- [webpack-bundle-analyzer](https://github.com/th0r/webpack-bundle-analyzer)
- [webpack-dev-server](https://github.com/webpack/webpack-dev-server)

## Frontend-Packages used

- [backbone](https://github.com/components/backbone)
- [jquery](http://jquery.com/)
- [jsb](https://github.com/DracoBlue/jsb)
- [logging.js](https://github.com/DracoBlue/logging-js)
- [underscore](https://github.com/jashkenas/underscore)

## Project structure

The kickstart-setup provides the three main folders `source/`, `build/` and `dist/` plus a `tmp/`-folder. All source-files will be put to the `source`-folder like templates, fonts, images, js- and sass-files. These files will be processed by several grunt tasks – e.g. grunt-sass: sass -> css – and then stored in the `build`-folder. From there you can view the generated html-files in the browser. The `dist`-folder is built up like the `build`-folder. The main difference between `build/` and `dist/` is, that `dist/` has combined and minified css/js files and no unnecessary files or code-comments. The `build`-folder is for debugging your files, the `dist-`folder should be used for production.

```
$ tree -d -I node_modules
.
├── build
│   ├── css
│   ├── fonts
│   ├── img
│   │   ├── appicons
│   │   └── bgs
│   └── js
├── dist
│   ├── css
│   ├── fonts
│   ├── img
│   │   ├── appicons
│   │   └── bgs
│   └── js
├── grunt
│   ├── config
│   ├── tasks
├── source<% if (config.get('staticPageGenerator').indexOf('assemble') != -1) { %>
│   ├── assemble
│   │   ├── data
│   │   ├── helpers
│   │   ├── layouts
│   │   ├── pages
│   │   └── partials<% } %><% if (config.get('staticPageGenerator').indexOf('twigRender') != -1) { %>
│   ├── html
│   │   ├── data
│   │   ├── macros
│   │   ├── layouts
│   │   ├── pages
│   │   └── partials<% } %>
│   ├── fonts
│   ├── img
│   │   ├── appicons
│   │   ├── bgs
│   │   ├── dev
│   │   └── temp
│   ├── js
│   │   └── modules
│   ├── sass
│   │   ├── blocks
│   │   ├── extends
│   │   ├── mixins
│   │   └── variables
│   └── styleguide-template
│       └── public
└── tests
└── tmp
    ├── svgcss
    ├── svg-bg-extends
    └── svgmin
        └── bgs
```


## HTML

For the HTML structure, please have a look at [nikita.html](https://github.com/nikita-kit/nikita-html). This sub project
describes the HTML coding standards and conventions.


## CSS

For the CSS structure, please have a look at [nikita.css](https://github.com/nikita-kit/nikita-css). This sub project
describes the CSS coding standards and conventions.


## Javascript

For the JS structure, please have a look at [nikita.js](https://github.com/nikita-kit/nikita-js). This sub project
describes the JS coding standards and conventions.

The master layout at `html/layouts/master.twig` includes the javascript at the end of the file (before the closing `</body>` tag).

``` html
<script src="js/main.js"></script>
```

The `js/main.js` file is generated by webpack. This file contains everything, which is `require`d or `import`ed in your JS-Code.
Run `grunt analyze-js` to see bundled content of `js/main.js` as convenient interactive zoomable treemap.


## Tests

You'd like to test your javascript code? The kickstarter comes with Jest testing framework!
Just add your tests at `tests/`-folder and run `grunt test`. To launch Jest in watch mode, just run `grunt test --watch`.
If you're interested in code coverage, run  `grunt test-coverage`.


## Code linting

The kickstarter comes with tasks for linting your JS, HTML and SASS code.
In addition, the SASS and the JS code linting will be executed as a pre commit hook.
This ensures a basic code style in nikita projects.
Run `grunt fix-scss` or `grunt fix-js` to call the linter with the `--fix` option.
This will fix most of the common problems like indention, brace style and style property order automatically.


## Images

All images from `img`-folder will be minified and copied during build.

<% if (config.get('features').indexOf('svgBackgrounds') != -1) { %>

### SVG images as Data-URIs

To include your svg icons as background-images, proceed like this:

1. Just put your SVG-icons into `source/img/bgs`.
2. All icons will be processed with the svgmin-task and put into the `tmp/svgmin/bgs` folder.
3. Afterwards the svgcss-task uses these icons to produce SCSS-files (all icons are included as data-URIs in the form of SASS-placeholders), which will be put into `tmp/svgcss` folder.
4. These SCSS-files will now be processed by the string-replace-task to get different placeholder-extends. They are saved into `tmp/svg-bg-extends` folder.
5. Now you can include your icons by using the `_svg-background.scss` mixin. Just type `@include svg-background(name-of-your-icon);`.
<% } %>


## Use `source+build+dist` or one custom folder

Since 0.9.0 it's possible to decide whether you want to use the default structure:

```
source
dist
build
```

or if you want to use a custom folder (e.g. for symfony2):

```
src/AppBundle/Resources/public
```

To decide between those, you will be asked:

``` console
? Do you want to use "build/source and dist" folder? No
? Which source folder do you want to use? (src/AppBundle/Resources/public)
```

You can choose `Y` to keep the default logic (using source-folder to generate dist+build folder depending on the grunt
task you choose).

## Questions?

If you're asking yourself »Why not …?« have a look at my [WHYNOT.md](https://github.com/nikita-kit/nikita-kickstarter/blob/master/WHY-NOT.md) file. There we might answer some common questions. :)


## Contributing

Please make contributions on the [generator-nikita project](https://github.com/nikita-kit/generator-nikita#Contributing).


## License

nikita.kickstarter is licensed under [CC0](http://creativecommons.org/publicdomain/zero/1.0/): Public Domain Dedication, please see
[NIKITA-LICENSE.md](https://github.com/nikita-kit/nikita-kickstarter/blob/master/NIKITA-LICENSE.md) for further information.
